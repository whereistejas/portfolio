---
import "../styles/readinglist.css";

import Homepage from "../components/homepage.astro";
import Textorlink from "../components/textorlink.astro";

import Row from "../components/row.astro";

const apiToken: string = "FniVXl7lBu5esBwjW47jhapfdqvo95st7q81dXEcDM1935dTJU";

/**
 * Represents the simplified shape you want for each Reader document.
 */
type Item = {
  url: URL;
  saved_at: Date;
  title: string;
  summary: string;
  kind: string;
};

/**
 * Options for fetching documents from Readwise Reader.
 * You can omit or add more based on the API docs:
 * https://readwise.io/api/v3/list/
 */
interface FetchReaderDocsOptions {
  token: string; // Your Readwise API token
  location?: string; // new, later, shortlist, archive, feed
  category?: string; // article, email, rss, highlight, note, pdf, epub, tweet, video
  updatedAfter?: string; // Must be an ISO8601 date string (e.g. "2023-01-15T00:00:00Z")
  withHtmlContent?: boolean; // Whether or not to include HTML content
  // Add others if needed, e.g. "id"
}

/**
 * Fetches ALL documents (by following pagination) from the Readwise Reader "/api/v3/list/" endpoint,
 * and returns them in a simplified array of type `Item`.
 */
async function fetchAllReadwiseReaderItems(
  options: FetchReaderDocsOptions
): Promise<Item[]> {
  const { token, location, category, updatedAfter, withHtmlContent } = options;

  // Base URL for the endpoint
  const baseUrl = "https://readwise.io/api/v3/list/";

  // We'll store results here
  const items: Item[] = [];

  // Build query params for each request
  const url = new URL(baseUrl);
  // if (pageCursor) {
  //   url.searchParams.set("pageCursor", pageCursor);
  // }
  if (location) {
    url.searchParams.set("location", location);
  }
  if (category) {
    url.searchParams.set("category", category);
  }
  if (updatedAfter) {
    url.searchParams.set("updatedAfter", updatedAfter);
  }
  if (withHtmlContent != null) {
    url.searchParams.set("withHtmlContent", String(withHtmlContent));
  }

  console.warn(`mew`);
  // Make the request
  const response = await fetch(url.toString(), {
    headers: {
      Authorization: `Token ${token}`,
    },
  });

  if (!response.ok) {
    throw new Error(
      `Failed to fetch Reader items: ${response.status} ${response.statusText}`
    );
  }

  // The response contains { count, nextPageCursor, results }
  const data = await response.json();

  // If this endpoint returns `results` containing the actual docs
  // (as shown in the example JSON you provided)
  const docs = data.results ?? [];

  // Transform each doc into your desired `Item` shape
  for (const doc of docs) {
    items.push({
      url: new URL(doc.source_url),
      saved_at: new Date(doc.saved_at),
      title: doc.title,
      summary: doc.summary,
      kind: doc.category,
    });
  }

  return items;
}

// Example usage:
let items = await fetchAllReadwiseReaderItems({
  token: apiToken,
  location: "archive",
});

const headers = [
  { type: "text", content: "TEJAS SANAP" },
  { type: "text", content: "READING LIST" },
  { type: "link", content: "CLOSE", href: "/" },
];
---

<Homepage>
  <Fragment slot="header">
    {
      headers.map((el) => (
        <Textorlink type={el.type} content={el.content} href={el.href} />
      ))
    }
  </Fragment>
  <Fragment slot="main">
    <section class="readinglist">
      <div class="readinglist-inner">
        {
          items.map((item) => (
            <Row key={item.saved_at.toLocaleDateString()}>
              <p>
                <a href={item.url} target="_blank" rel="noopener noreferrer">
                  {item.title}
                </a>
                <span class="kind">{item.kind}</span>
              </p>
              <p class="summary">{item.summary}</p>
            </Row>
          ))
        }
      </div>
    </section>
  </Fragment>
</Homepage>
