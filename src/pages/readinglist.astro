---
import Page from "../layouts/page.astro";
import Textorlink from "../components/textorlink.astro";

import Row from "../components/row.astro";

/**
 * Represents the simplified shape you want for each Reader document.
 */
type Item = {
  url: string;
  last_moved_at: Date;
  title: string;
  summary: string;
};

/**
 * Options for fetching documents from Readwise Reader.
 * You can omit or add more based on the API docs:
 * https://readwise.io/api/v3/list/
 */
interface FetchReaderDocsOptions {
  token: string; // Your Readwise API token
  location?: string; // new, later, shortlist, archive, feed
  category?: string; // article, email, rss, highlight, note, pdf, epub, tweet, video
  updatedAfter?: string; // Must be an ISO8601 date string (e.g. "2023-01-15T00:00:00Z")
  withHtmlContent?: boolean; // Whether or not to include HTML content
  // Add others if needed, e.g. "id"
}

/**
 * Fetches ALL documents (by following pagination) from the Readwise Reader "/api/v3/list/" endpoint,
 * and returns them in a simplified array of type `Item`.
 */
async function fetchAllReadwiseReaderItems(
  options: FetchReaderDocsOptions
): Promise<Map<string, Item[]>> {
  const { token, location, category, updatedAfter, withHtmlContent } = options;

  const baseUrl = "https://readwise.io/api/v3/list/";
  const itemsMap: Map<string, Item[]> = new Map();

  let nextPageCursor: string | null = null;
  do {
    // Build query params for each request
    const url = new URL(baseUrl);
    if (location) url.searchParams.set("location", location);
    if (category) url.searchParams.set("category", category);
    if (updatedAfter) url.searchParams.set("updatedAfter", updatedAfter);
    if (withHtmlContent != null)
      url.searchParams.set("withHtmlContent", String(withHtmlContent));
    if (nextPageCursor) url.searchParams.set("pageCursor", nextPageCursor);

    const response = await fetch(url.toString(), {
      headers: {
        Authorization: `Token ${token}`,
      },
    });

    if (!response.ok) {
      throw new Error(
        `Failed to fetch Reader items: ${response.status} ${response.statusText}`
      );
    }

    const data = await response.json();
    const docs = data.results ?? [];

    for (const doc of docs) {
      const item: Item = {
        url: new URL(doc.source_url).href,
        last_moved_at: new Date(doc.last_moved_at),
        title: doc.title,
        summary: doc.summary,
      };

      const dateStr = item.last_moved_at
        .toLocaleDateString("en-GB", {
          day: "2-digit",
          month: "short",
          year: "numeric",
        })
        .replace(/\//g, ".");

      if (!itemsMap.has(dateStr)) {
        itemsMap.set(dateStr, []);
      }
      itemsMap.get(dateStr)?.push(item);
    }

    nextPageCursor = data.nextPageCursor || null;
  } while (nextPageCursor);

  // Sort the itemsMap by date in descending order
  const sortedItemsMap = new Map(
    [...itemsMap.entries()].sort((a, b) => {
      const dateA = new Date(a[0].split(".").reverse().join("-"));
      const dateB = new Date(b[0].split(".").reverse().join("-"));
      return dateB.getTime() - dateA.getTime();
    })
  );

  console.log(`\nLast date fetched: ${sortedItemsMap.keys().next().value}`);

  return sortedItemsMap;
}
let items: Map<string, Item[]>;

// // Node.js fs and path imports for server-side caching
// let fs: typeof import("fs/promises") | undefined;
// let path: typeof import("path") | undefined;
// if (typeof window === "undefined") {
//   fs = await import("fs/promises");
//   path = await import("path");
// }
// // Try API first, then fallback to cache if API fails
// try {
let API_TOKEN = import.meta.env.READWISE_TOKEN;
if (API_TOKEN === undefined) {
  throw new Error("No API token found");
}

items = await fetchAllReadwiseReaderItems({
  token: API_TOKEN as string,
  location: "archive",
});

if (items.size === 0) {
  throw new Error("No items found");
}
//   // If on server, save to cache for offline use
//   if (typeof window === "undefined" && fs && path) {
//     const cacheDir = path.resolve(process.cwd(), "tmp");
//     const cacheFile = path.join(cacheDir, "readinglist.json");
//     try {
//       await fs.mkdir(cacheDir, { recursive: true });
//       await fs.writeFile(
//         cacheFile,
//         JSON.stringify(Array.from(items.entries())),
//         "utf-8"
//       );
//     } catch (e) {
//       // Ignore cache write errors
//     }
//   }
// } catch (err: any) {
//   // If API fails, try to read from cache (server only)
//   if (typeof window === "undefined" && fs && path) {
//     const cacheDir = path.resolve(process.cwd(), "tmp");
//     const cacheFile = path.join(cacheDir, "readinglist.json");
//     try {
//       const cacheData = await fs.readFile(cacheFile, "utf-8");
//       const parsed: [string, Item[]][] = JSON.parse(cacheData);
//       items = new Map(
//         parsed.map(([date, arr]: [string, any[]]) => [
//           date,
//           arr.map((item: any) => ({
//             ...item,
//             last_moved_at: new Date(item.last_moved_at),
//           })),
//         ])
//       );
//     } catch (cacheErr) {
//       throw new Error("Failed to fetch from API and no cache available.");
//     }
//   } else {
//     throw new Error(
//       "Failed to fetch from API and cache is not available on client."
//     );
//   }
// }

const headers = [
  { type: "text", content: "READING LIST" },
  { type: "link", content: "CLOSE", href: "/" },
];
---

<Page title="Reading List">
  <Fragment slot="header">
    {
      headers.map((el) => (
        <Textorlink type={el.type} content={el.content} href={el.href} />
      ))
    }
  </Fragment>
  <Fragment slot="main">
    <div class="readinglist_main">
      {
        items.entries().map(([date, items]) => (
          <Row>
            <Fragment slot="key">
              {new Date(date)
                .toLocaleDateString("en-GB", {
                  day: "2-digit",
                  month: "numeric",
                  year: "numeric",
                })
                .replace(/\//g, ".")}
            </Fragment>
            <Fragment slot="value">
              <div class="items">
                {items.map((item) => (
                  <div>
                    <a
                      href={item.url}
                      target="_blank"
                      rel="noopener noreferrer"
                      class="title"
                    >
                      {item.title}
                    </a>
                    {/* <p class="summary">{item.summary}</p> */}
                  </div>
                ))}
              </div>
            </Fragment>
          </Row>
        ))
      }
    </div>
  </Fragment>
</Page>
