---
import Page from "../layouts/page.astro";

import Row from "../components/row.astro";
import Textorlink from "../components/textorlink.astro";

const apiToken: string = "FniVXl7lBu5esBwjW47jhapfdqvo95st7q81dXEcDM1935dTJU";

/**
 * Represents the simplified shape you want for each Reader document.
 */
type Item = {
  url: string;
  last_moved_at: Date;
  title: string;
  summary: string;
};

/**
 * Options for fetching documents from Readwise Reader.
 * You can omit or add more based on the API docs:
 * https://readwise.io/api/v3/list/
 */
interface FetchReaderDocsOptions {
  token: string; // Your Readwise API token
  location?: string; // new, later, shortlist, archive, feed
  category?: string; // article, email, rss, highlight, note, pdf, epub, tweet, video
  updatedAfter?: string; // Must be an ISO8601 date string (e.g. "2023-01-15T00:00:00Z")
  withHtmlContent?: boolean; // Whether or not to include HTML content
  // Add others if needed, e.g. "id"
}

/**
 * Fetches ALL documents (by following pagination) from the Readwise Reader "/api/v3/list/" endpoint,
 * and returns them in a simplified array of type `Item`.
 */
async function fetchAllReadwiseReaderItems(
  options: FetchReaderDocsOptions
): Promise<Map<string, Item[]>> {
  const { token, location, category, updatedAfter, withHtmlContent } = options;

  // Base URL for the endpoint
  const baseUrl = "https://readwise.io/api/v3/list/";

  // We'll store results here
  const itemsMap: Map<string, Item[]> = new Map();

  // Build query params for each request
  const url = new URL(baseUrl);
  if (location) {
    url.searchParams.set("location", location);
  }
  if (category) {
    url.searchParams.set("category", category);
  }
  if (updatedAfter) {
    url.searchParams.set("updatedAfter", updatedAfter);
  }
  if (withHtmlContent != null) {
    url.searchParams.set("withHtmlContent", String(withHtmlContent));
  }

  // Make the request
  const response = await fetch(url.toString(), {
    headers: {
      Authorization: `Token ${token}`,
    },
  });

  if (!response.ok) {
    throw new Error(
      `Failed to fetch Reader items: ${response.status} ${response.statusText}`
    );
  }

  // The response contains { count, nextPageCursor, results }
  const data = await response.json();

  // If this endpoint returns `results` containing the actual docs
  const docs = data.results ?? [];

  // Transform each doc into your desired `Item` shape
  for (const doc of docs) {
    const item: Item = {
      url: new URL(doc.source_url).href,
      last_moved_at: new Date(doc.last_moved_at),
      title: doc.title,
      summary: doc.summary,
    };

    const dateStr = item.last_moved_at
      .toLocaleDateString("en-GB", {
        day: "2-digit",
        month: "short",
        year: "numeric",
      })
      .replace(/\//g, ".");

    if (!itemsMap.has(dateStr)) {
      itemsMap.set(dateStr, []);
    }
    itemsMap.get(dateStr)?.push(item);
  }

  // Sort the itemsMap by date in descending order
  const sortedItemsMap = new Map(
    [...itemsMap.entries()].sort((a, b) => {
      const dateA = new Date(a[0].split(".").reverse().join("-"));
      const dateB = new Date(b[0].split(".").reverse().join("-"));
      return dateB.getTime() - dateA.getTime();
    })
  );

  return sortedItemsMap;
}

// Example usage:
let items = await fetchAllReadwiseReaderItems({
  token: apiToken,
  location: "archive",
});

const displayedDates = new Set<string>();

const headers = [
  { type: "text", content: "READING LIST" },
  { type: "link", content: "CLOSE", href: "/" },
];
---

<Page>
  <Fragment slot="header">
    {
      headers.map((el) => (
        <Textorlink type={el.type} content={el.content} href={el.href} />
      ))
    }
  </Fragment>
  <Fragment slot="main">
    <div
      class="first:pt-2 first:md:pt-3 flex flex-col gap-2 md:gap-3
    self-start"
    >
      {
        items.entries().map(([dateKey, itemsList]) => {
          if (!displayedDates.has(dateKey)) {
            displayedDates.add(dateKey);
          } else {
            dateKey = "";
          }

          return (
            <Row>
              <Fragment slot="key">{dateKey}</Fragment>
              <Fragment slot="value">
                <div class="flex flex-col gap-2 md:gap-3">
                  {itemsList.map((item: Item) => {
                    return (
                      <div class="flex flex-col gap-0.25">
                        <p class="uppercase font-medium">
                          <a
                            href={item.url}
                            target="_blank"
                            rel="noopener noreferrer"
                          >
                            {item.title}
                          </a>
                        </p>
                        <p class="font-regular">{item.summary}</p>
                      </div>
                    );
                  })}
                </div>
              </Fragment>
            </Row>
          );
        })
      }
    </div>
  </Fragment>
</Page>
